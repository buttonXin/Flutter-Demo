pipeline {
	agent any

	parameters {
		gitParameter branchFilter: 'origin/(.*release.*|release|dev|.*standard.*)', defaultValue: 'standard_dev', name: 'BRANCH', type: 'PT_BRANCH', useRepository: 'ssh://ggxin@gerrit.nreal.ai:29418/Nebula'
		gitParameter branchFilter: 'origin/(release/.*|dev)', defaultValue: 'dev_combine', name: 'Unity_BRANCH', type: 'PT_BRANCH', useRepository: 'git@gitlab.com:nrealces/nrealappunity.git'
		choice(name: 'CHANNEL', choices: ['ALL', 'LGU', 'KDDI', 'ATT', 'UNIVERSAL', 'DEBUG'], description: '渠道选择')
		string(name: 'GlassControlLib', description: '''glasses_control.aar的测试包路径，例如：\\\\package.nreal.work\\Package\\Tmp\\glasses_aar\\glasses_control.aar''')
		string(name: 'NrApiLib', description: '''nr_api_server.aar的测试包路径，例如：
smb://package.nreal.work/Package/SDK/sdk_develop/android/2020-12-07@14.17.39_develop/NRSDKPack/release/EXPERIMENTAL/nr_api_service.aar
''')
	}

	stages {

        stage('Before build') {
			steps {
				bat label: 'git rollback', script: '''cd "%WORKSPACE%/Nebula"
				git add -A
				git reset --hard'''
			}
		}

		stage('Sync space code') {
			steps {
			    println "${WORKSPACE}"
                println "${JENKINS_HOME}"
				checkout([
					$class: 'GitSCM', branches: [[name: "${params.Unity_BRANCH}"]], doGenerateSubmoduleConfigurations: false,
					extensions: [
						//[$class: 'CleanBeforeCheckout'],
						[$class: 'RelativeTargetDirectory', relativeTargetDir: 'UnityProject'],
						[$class: 'CloneOption', noTags: true, timeout: 60]
					],
					submoduleCfg: [],
					userRemoteConfigs: [[credentialsId: '5eafa28c-48d6-4e0c-b838-b086ec6f68d6', url: 'git@gitlab.com:nrealces/nrealappunity.git']]
				])

				checkout([
					$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
					extensions: [
						[$class: 'CleanBeforeCheckout'],
						[$class: 'RelativeTargetDirectory', relativeTargetDir: 'PublishScripts'],
						[$class: 'CloneOption', noTags: true, timeout: 60]
					],
					submoduleCfg: [],
					userRemoteConfigs: [[credentialsId: '5eafa28c-48d6-4e0c-b838-b086ec6f68d6', url: 'ssh://git@gitlab.nreal.ai:9022/unity/apprelease.git']]
				])

				checkout([
					$class: 'GitSCM',
					branches: [[name: "${params.BRANCH}"]],
					doGenerateSubmoduleConfigurations: false,
					extensions: [
						[$class: 'CloneOption', noTags: true, timeout: 60],
						[$class: 'RelativeTargetDirectory', relativeTargetDir: 'Nebula']
					],
					userRemoteConfigs: [[url: 'ssh://ggxin@gerrit.nreal.ai:29418/Nebula', credentialsId: '989f3050-d13b-4c31-8e89-b08802fd9067']]
				])

				println "Checkout Unity Project : ${params.Unity_BRANCH}"

				script{
					dir("UnityProject") {
						bat label: 'git', script: 'git submodule foreach --recursive git reset --hard'
						bat label: 'git', script: 'git submodule foreach --recursive git clean -fdx'
						bat label: 'git', script: 'git config -f .gitmodules submodule.Assets/ThirdParty/NrealToolkits.url git@gitlab.com:nreal.ar/nrealtoolkits.git'
						//bat label: 'git', script: 'git config -f .gitmodules submodule.Assets/ThirdParties/SDK.branch master'
						bat label: 'git', script: 'git submodule sync'

						withCredentials(bindings: [sshUserPrivateKey(credentialsId: '5eafa28c-48d6-4e0c-b838-b086ec6f68d6', keyFileVariable: 'SSH_KEY')]) {
							// bat 'where ssh-agent'
							bat '''ssh-agent sh -c 'ssh-add "$SSH_KEY"; git submodule update --init --recursive Assets/ThirdParty/NrealToolkits' '''
						}
					}

				// 	dir("Nebula") {
				// 		bat label: 'git', script: 'git submodule foreach --recursive git reset --hard'
				// 		bat label: 'git', script: 'git submodule foreach --recursive git clean -fdx'
				// 		bat label: 'git', script: 'git submodule sync'

				// 		withCredentials(bindings: [sshUserPrivateKey(credentialsId: '5eafa28c-48d6-4e0c-b838-b086ec6f68d6', keyFileVariable: 'SSH_KEY')]) {
				// 			// bat 'where ssh-agent'
				// 			bat '''ssh-agent sh -c 'ssh-add "$SSH_KEY"; git submodule update --init --recursive Assets/ThirdParty/NrealToolkits' '''
				// 		}
				// 	}
				}

			}
		}

		stage('Export') {
          environment {
              UNITY_HOME = tool name: 'Unity2018.4.12f1', type: 'org.jenkinsci.plugins.unity3d.Unity3dInstallation'
              AARLIBPATH = "${params.AARLIBPATH}"
              NRSDK = "/Assets/NRSDK"
          }
          steps {
              bat returnStdout: true, script: 'python PublishScripts/UnityProject/copy_files.py'
              bat '''if not exist Build md Build
					copy PublishScripts\\UnityProject\\keystores\\nebula.jks Build\\keystore'''
			  bat returnStdout: true, script: '''"%UNITY_HOME%\\Editor\\Unity.exe" -projectPath UnityProject -quit -batchmode -buildTarget Android -buildsystem Gradle -executeMethod NRKernal.Release.OnPreBuildForNebulaSpace.PreBuild  -logFile "%WORKSPACE%/Logs/unity3d_editor_%BUILD_NUMBER%_prebuild.log"'''

              bat returnStdout: true, script: '''"%UNITY_HOME%\\Editor\\Unity.exe" -projectPath UnityProject -quit -batchmode -buildTarget Android -buildsystem Gradle -executeMethod JenkinsAutoBuilder.AutoBuilder.Build -splitobb "true"  -logFile "%WORKSPACE%/Logs/unity3d_editor_%BUILD_NUMBER%_obb.log" -outpath "%WORKSPACE%/Build/Exported_OBB"'''

              bat returnStdout: true, script: '''"%UNITY_HOME%\\Editor\\Unity.exe" -projectPath UnityProject -quit -batchmode -buildTarget Android -buildsystem Gradle -executeMethod JenkinsAutoBuilder.AutoBuilder.Build  -logFile "%WORKSPACE%/Logs/unity3d_editor_%BUILD_NUMBER%.log" -outpath "%WORKSPACE%/Build/Exported"'''

              //bat returnStdout: true, script: '''"%UNITY_HOME%\\Editor\\Unity.exe" -projectPath UnityProject -quit -batchmode -buildTarget Android -buildsystem Gradle -executeMethod JenkinsAutoBuilder.AutoBuilder.Build -buildType "DEBUG"  -logFile "%WORKSPACE%/Logs/unity3d_editor_%BUILD_NUMBER%_dev.log" -outpath "%WORKSPACE%/Build/Exported_DEV"'''
          }
		}

		stage('Sync nebula code') {
			steps {
				checkout([
					$class: 'GitSCM',
					branches: [[name: "${params.BRANCH}"]],
					doGenerateSubmoduleConfigurations: false,
					extensions: [
						[$class: 'CloneOption', noTags: true, timeout: 60],
						[$class: 'RelativeTargetDirectory', relativeTargetDir: 'Nebula']
					],
					userRemoteConfigs: [[url: 'ssh://ggxin@gerrit.nreal.ai:29418/Nebula', credentialsId: '989f3050-d13b-4c31-8e89-b08802fd9067']]
				])
			}
		}

		stage('Flutter pub get') {
			steps {
				bat '''cd "%WORKSPACE%/Nebula/"
				flutter packages get'''
			}
		}

		stage('Modify version info') {
			steps {
				bat '''cd "%WORKSPACE%/python/"
				python modify_version_info.py'''
			}
		}

	    stage('Build') {
            steps {
            	script {
                    currentBuild.description = "Channel:${CHANNEL} Nebula:${BRANCH} Space:${Unity_BRANCH}"
	            	if (env.GlassControlLib || env.NrApiLib) {
						bat(script: 'python "%WORKSPACE%/python/task.py" USER_DEFINDED_LIB_TASK %Unity_BRANCH% %GlassControlLib% %NrApiLib%', returnStdout: true)
	            	} else {
	            		bat(script: 'python "%WORKSPACE%/python/task.py" %CHANNEL% %Unity_BRANCH%', returnStdout: true)
	            	}

            	}

            }
        }


		stage('Upload files') {
			steps {
                script {
                    if (env.GlassControlLib || env.NrApiLib) {
                        bat '''python "%WORKSPACE%/python/copy_files_out_forapk.py" "%WORKSPACE%/Nebula/build/app/outputs/apk/" "InternalDemo/Android/Demos/" %GlassControlLib% %NrApiLib%'''
                    } else {
                        bat '''python "%WORKSPACE%/python/copy_files_out_forapk.py" "%WORKSPACE%/Nebula/build/app/outputs/apk/" "InternalDemo/Android/Demos/"'''
                    }
                    bat '''python "%WORKSPACE%/python/upload_obb_file.py" "%WORKSPACE%/Nebula/android/nebula_space/obb-resource/" "InternalDemo/Android/Demos/"'''
                }
			}
		}

		stage('After build') {
			steps {
				bat label: 'git rollback', script: '''cd "%WORKSPACE%/Nebula"
				git add -A
				git reset --hard'''
			}
		}
	}

	post {
		cleanup {
            /* clean up our workspace */
            // deleteDir()
            /* clean up tmp directory */
            dir("${WORKSPACE}/Nebula@tmp") {
                deleteDir()
            }
          	dir("${WORKSPACE}@tmp") {
                deleteDir()
            }
            dir("PublishScripts@tmp") {
                deleteDir()
            }
            dir("UnityProject@tmp") {
                deleteDir()
            }
            dir("${WORKSPACE}/Nebula/Build") {
                deleteDir()
            }
        }
	}
}